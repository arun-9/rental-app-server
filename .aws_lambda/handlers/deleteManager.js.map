{
  "version": 3,
  "sources": ["../../src/handlers/deleteManager.ts", "../../src/db/connection.ts", "../../src/db/models/Manager.ts"],
  "sourcesContent": ["// src/handlers/deleteManager.ts\r\nimport { connectToDb } from \"../db/connection\";\r\nimport { getManagerModel, Manager } from \"../db/models/Manager\";\r\nimport type { Sequelize } from \"sequelize\";\r\nimport type {\r\n  APIGatewayProxyEventV2,\r\n  APIGatewayProxyResultV2,\r\n} from \"aws-lambda\";\r\n\r\nlet sequelize: Sequelize | null = null;\r\nlet ManagerModel: typeof Manager | null = null;\r\n\r\nconst corsHeaders = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n};\r\n\r\nexport default async function handler(\r\n  event: APIGatewayProxyEventV2\r\n): Promise<APIGatewayProxyResultV2> {\r\n  try {\r\n    if (!sequelize) {\r\n      sequelize = await connectToDb();\r\n      ManagerModel = await getManagerModel(sequelize);\r\n    }\r\n\r\n    if (!ManagerModel) throw new Error(\"Manager model not initialized\");\r\n\r\n    const { pathParameters } = event;\r\n    const id = pathParameters?.id;\r\n\r\n    if (!id) {\r\n      return {\r\n        statusCode: 400,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ error: \"Manager ID is required\" }),\r\n      };\r\n    }\r\n\r\n    const manager = await ManagerModel.findByPk(id);\r\n\r\n    if (!manager) {\r\n      return {\r\n        statusCode: 404,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ error: \"Manager not found\" }),\r\n      };\r\n    }\r\n\r\n    await manager.destroy();\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify({ message: \"Manager deleted successfully\" }),\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to delete manager:\", error);\r\n    return {\r\n      statusCode: 500,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify({ error: \"Failed to delete manager\" }),\r\n    };\r\n  }\r\n}\r\n", "import { Sequelize } from \"sequelize\";\r\n\r\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\r\nconst timeout = Number(TIMEOUT) * 1000;\r\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\r\n\r\nlet sequelize: Sequelize | null = null;\r\n\r\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\r\nexport const connectToDb = async (): Promise<Sequelize> => {\r\n  if (sequelize) {\r\n    sequelize.connectionManager.initPools();\r\n\r\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\r\n      delete sequelize.connectionManager.getConnection;\r\n    }\r\n    return sequelize;\r\n  }\r\n\r\n  sequelize = new Sequelize(URI, {\r\n    logging: false,\r\n    pool: {\r\n      min: 0,\r\n      max: 2,\r\n      idle: 0,\r\n      acquire: 3000,\r\n      evict: timeout,\r\n    },\r\n  });\r\n  await sequelize.authenticate();\r\n\r\n  return sequelize;\r\n};\r\n", "// src/db/models/Manager.ts\r\nimport {\r\n  Sequelize,\r\n  Model,\r\n  DataTypes,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n  CreationOptional\r\n} from \"sequelize\";\r\n\r\nclass Manager extends Model<\r\n  InferAttributes<Manager>,\r\n  InferCreationAttributes<Manager>\r\n> {\r\n  declare id: CreationOptional<number>;\r\n  declare cognitoId: string;\r\n  declare name: string;\r\n  declare email: string;\r\n  declare phoneNumber: string;\r\n}\r\n\r\nexport const getManagerModel = async (\r\n  sequelize?: Sequelize\r\n): Promise<typeof Manager> => {\r\n  if (sequelize) {\r\n    Manager.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          autoIncrement: true\r\n        },\r\n        cognitoId: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false,\r\n          unique: true\r\n        },\r\n        name: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        email: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        phoneNumber: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        }\r\n      },\r\n      {\r\n        sequelize,\r\n        modelName: \"manager\",\r\n        tableName: \"managers\",\r\n        timestamps: false,\r\n        comment: \"Managers who manage properties, tenants, and units\"\r\n      }\r\n    );\r\n\r\n    await Manager.sync();\r\n  }\r\n\r\n  return Manager;\r\n};\r\n\r\nexport { Manager };\r\nexport type IManager = InferAttributes<Manager>;\r\n"],
  "mappings": "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",
  "names": ["import_sequelize", "sequelize", "sequelize"]
}
