{
  "version": 3,
  "sources": ["../../src/handlers/createTenant.ts", "../../src/db/connection.ts", "../../src/db/models/tenant.ts", "../../src/db/models/Property.ts", "../../src/db/models/Unit.ts"],
  "sourcesContent": ["import { connectToDb } from \"../db/connection\";\r\nimport { getTenantModel, Tenant } from \"../db/models/tenant\";\r\nimport { getPropertyModel } from \"../db/models/Property\";\r\nimport { getUnitModel } from \"../db/models/Unit\";\r\n\r\nimport { UniqueConstraintError, ValidationError, Sequelize } from \"sequelize\";\r\n\r\nimport type {\r\n  APIGatewayProxyEventV2,\r\n  APIGatewayProxyResultV2,\r\n} from \"aws-lambda\";\r\n\r\nlet sequelize: Sequelize | null = null;\r\nlet TenantModel: typeof Tenant | null = null;\r\n\r\nconst corsHeaders = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n};\r\n\r\nexport default async function handler(\r\n  event: APIGatewayProxyEventV2\r\n): Promise<APIGatewayProxyResultV2> {\r\n  try {\r\n    if (!sequelize) {\r\n      sequelize = await connectToDb();\r\n\r\n      // Load required models for associations\r\n      const PropertyModel = await getPropertyModel(sequelize);\r\n      const UnitModel = await getUnitModel(sequelize, PropertyModel);\r\n      TenantModel = await getTenantModel(sequelize, PropertyModel, UnitModel);\r\n    }\r\n\r\n    if (!TenantModel) throw new Error(\"Tenant model not initialized\");\r\n\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n\r\n    const createdTenant = await TenantModel.create(body);\r\n\r\n    return {\r\n      statusCode: 201,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify(createdTenant.toJSON()),\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Failed to create tenant:\", error);\r\n\r\n    if (error instanceof UniqueConstraintError) {\r\n      return {\r\n        statusCode: 409, // Conflict\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({\r\n          error: \"Tenant already exists with the provided unique field.\",\r\n          details: error.errors.map((e) => ({\r\n            field: e.path,\r\n            message: e.message,\r\n          })),\r\n        }),\r\n      };\r\n    }\r\n\r\n    if (error instanceof ValidationError) {\r\n      return {\r\n        statusCode: 400, // Bad request\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({\r\n          error: \"Validation failed.\",\r\n          details: error.errors.map((e) => ({\r\n            field: e.path,\r\n            message: e.message,\r\n          })),\r\n        }),\r\n      };\r\n    }\r\n\r\n    return {\r\n      statusCode: 500,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify({ error: \"Failed to create tenant\" }),\r\n    };\r\n  }\r\n}\r\n", "import { Sequelize } from \"sequelize\";\r\n\r\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\r\nconst timeout = Number(TIMEOUT) * 1000;\r\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\r\n\r\nlet sequelize: Sequelize | null = null;\r\n\r\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\r\nexport const connectToDb = async (): Promise<Sequelize> => {\r\n  if (sequelize) {\r\n    sequelize.connectionManager.initPools();\r\n\r\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\r\n      delete sequelize.connectionManager.getConnection;\r\n    }\r\n    return sequelize;\r\n  }\r\n\r\n  sequelize = new Sequelize(URI, {\r\n    logging: false,\r\n    pool: {\r\n      min: 0,\r\n      max: 2,\r\n      idle: 0,\r\n      acquire: 3000,\r\n      evict: timeout,\r\n    },\r\n  });\r\n  await sequelize.authenticate();\r\n\r\n  return sequelize;\r\n};\r\n", "// src/db/models/Tenant.ts\r\nimport {\r\n  Sequelize,\r\n  Model,\r\n  DataTypes,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n  CreationOptional,\r\n  ForeignKey\r\n} from \"sequelize\";\r\n\r\nimport type { Property } from \"./Property\";\r\nimport type { Unit } from \"./Unit\";\r\n\r\n// 1. Typed Tenant model class\r\nclass Tenant extends Model<\r\n  InferAttributes<Tenant>,\r\n  InferCreationAttributes<Tenant>\r\n> {\r\n  declare id: CreationOptional<number>;\r\n  declare cognitoId: string;\r\n  declare name: string;\r\n  declare email: string;\r\n  declare phoneNumber: string;\r\n\r\n  declare propertyId: ForeignKey<Property[\"id\"]>;\r\n  declare unitId: ForeignKey<Unit[\"id\"]> | null;\r\n\r\n  // Optional association references\r\n  declare property?: Property;\r\n  declare unit?: Unit;\r\n}\r\n\r\n// 2. Init function with associations\r\nexport const getTenantModel = async (\r\n  sequelize?: Sequelize,\r\n  PropertyModel?: typeof Property,\r\n  UnitModel?: typeof Unit\r\n): Promise<typeof Tenant> => {\r\n  if (sequelize) {\r\n    Tenant.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          autoIncrement: true\r\n        },\r\n        cognitoId: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false,\r\n          unique: true\r\n        },\r\n        name: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        email: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        phoneNumber: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        propertyId: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: false\r\n        },\r\n        unitId: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: true\r\n        }\r\n      },\r\n      {\r\n        sequelize,\r\n        modelName: \"tenant\",\r\n        timestamps: false\r\n      }\r\n    );\r\n\r\n    // Associations\r\n    if (PropertyModel) {\r\n      Tenant.belongsTo(PropertyModel, {\r\n        foreignKey: \"propertyId\",\r\n        as: \"property\"\r\n      });\r\n      PropertyModel.hasMany(Tenant, {\r\n        foreignKey: \"propertyId\",\r\n        as: \"tenants\"\r\n      });\r\n    }\r\n\r\n    if (UnitModel) {\r\n      Tenant.belongsTo(UnitModel, {\r\n        foreignKey: \"unitId\",\r\n        as: \"unit\"\r\n      });\r\n      UnitModel.hasOne(Tenant, {\r\n        foreignKey: \"unitId\",\r\n        as: \"tenant\"\r\n      });\r\n    }\r\n\r\n    await Tenant.sync();\r\n  }\r\n\r\n  return Tenant;\r\n};\r\n\r\n// 3. Export class and type\r\nexport { Tenant };\r\nexport type ITenant = InferAttributes<Tenant>;\r\n", "// src/db/models/Property.ts\r\nimport {\r\n  Sequelize,\r\n  Model,\r\n  DataTypes,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n  CreationOptional,\r\n  ForeignKey\r\n} from \"sequelize\";\r\nimport type { Manager } from \"./Manager\";\r\n\r\n// 1. Typed Property class\r\nclass Property extends Model<\r\n  InferAttributes<Property>,\r\n  InferCreationAttributes<Property>\r\n> {\r\n  declare id: CreationOptional<number>;\r\n  declare name: string;\r\n  declare address: string;\r\n  declare numberOfUnits: number;\r\n  declare numberOfTenants: number;\r\n  declare thumbnail: string | null;\r\n\r\n  // Foreign key and association\r\n  declare managerId: ForeignKey<Manager[\"id\"]>;\r\n  declare manager?: Manager;\r\n}\r\n\r\n// 2. Initialization function\r\nexport const getPropertyModel = async (\r\n  sequelize?: Sequelize,\r\n  ManagerModel?: typeof Manager\r\n): Promise<typeof Property> => {\r\n  if (sequelize) {\r\n    Property.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          autoIncrement: true\r\n        },\r\n        name: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        address: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        numberOfUnits: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: false\r\n        },\r\n        numberOfTenants: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: false\r\n        },\r\n        thumbnail: {\r\n          type: DataTypes.STRING,\r\n          allowNull: true\r\n        },\r\n        managerId: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: false,\r\n          references: {\r\n            model: \"managers\",\r\n            key: \"id\"\r\n          }\r\n        }\r\n      },\r\n      {\r\n        sequelize,\r\n        modelName: \"property\",\r\n        timestamps: false\r\n      }\r\n    );\r\n\r\n    if (ManagerModel) {\r\n      Property.belongsTo(ManagerModel, {\r\n        foreignKey: \"managerId\",\r\n        as: \"manager\"\r\n      });\r\n\r\n      ManagerModel.hasMany(Property, {\r\n        foreignKey: \"managerId\",\r\n        as: \"properties\"\r\n      });\r\n    }\r\n\r\n    await Property.sync();\r\n  }\r\n\r\n  return Property;\r\n};\r\n\r\n// 3. Type exports\r\nexport { Property };\r\nexport type IProperty = InferAttributes<Property>;\r\n", "// src/db/models/Unit.ts\r\nimport {\r\n  Sequelize,\r\n  Model,\r\n  DataTypes,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n  CreationOptional,\r\n  ForeignKey\r\n} from \"sequelize\";\r\n\r\nimport type { Property } from \"./Property\";\r\nimport type { Tenant } from \"./tenant\";\r\n\r\n// 1. Define the class with typings\r\nclass Unit extends Model<\r\n  InferAttributes<Unit>,\r\n  InferCreationAttributes<Unit>\r\n> {\r\n  declare id: CreationOptional<number>;\r\n  declare unitNumber: string;\r\n  declare isVacant: boolean;\r\n\r\n  declare propertyId: ForeignKey<Property[\"id\"]>;\r\n  declare tenantId: ForeignKey<Tenant[\"id\"]> | null;\r\n\r\n  // Optional association references\r\n  declare property?: Property;\r\n  declare tenant?: Tenant;\r\n}\r\n\r\n// 2. Define and initialize the model\r\nexport const getUnitModel = async (\r\n  sequelize?: Sequelize,\r\n  PropertyModel?: typeof Property,\r\n  TenantModel?: typeof Tenant\r\n): Promise<typeof Unit> => {\r\n  if (sequelize) {\r\n    Unit.init(\r\n      {\r\n        id: {\r\n          type: DataTypes.INTEGER,\r\n          primaryKey: true,\r\n          autoIncrement: true\r\n        },\r\n        unitNumber: {\r\n          type: DataTypes.STRING,\r\n          allowNull: false\r\n        },\r\n        isVacant: {\r\n          type: DataTypes.BOOLEAN,\r\n          allowNull: false,\r\n          defaultValue: true\r\n        },\r\n        propertyId: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: false\r\n        },\r\n        tenantId: {\r\n          type: DataTypes.INTEGER,\r\n          allowNull: true\r\n        }\r\n      },\r\n      {\r\n        sequelize,\r\n        modelName: \"unit\",\r\n        timestamps: false\r\n      }\r\n    );\r\n\r\n    // 3. Define associations\r\n    if (PropertyModel) {\r\n      Unit.belongsTo(PropertyModel, {\r\n        foreignKey: \"propertyId\",\r\n        as: \"property\"\r\n      });\r\n\r\n      PropertyModel.hasMany(Unit, {\r\n        foreignKey: \"propertyId\",\r\n        as: \"units\"\r\n      });\r\n    }\r\n\r\n    if (TenantModel) {\r\n      Unit.belongsTo(TenantModel, {\r\n        foreignKey: \"tenantId\",\r\n        as: \"tenant\"\r\n      });\r\n\r\n      TenantModel.hasOne(Unit, {\r\n        foreignKey: \"tenantId\",\r\n        as: \"unit\"\r\n      });\r\n    }\r\n\r\n    await Unit.sync();\r\n  }\r\n\r\n  return Unit;\r\n};\r\n\r\n// 4. Export model and TS type\r\nexport { Unit };\r\nexport type IUnit = InferAttributes<Unit>;\r\n"],
  "mappings": "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",
  "names": ["import_sequelize", "sequelize", "import_sequelize", "sequelize", "import_sequelize", "sequelize", "TenantModel", "import_sequelize", "sequelize"]
}
