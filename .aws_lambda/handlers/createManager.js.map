{
  "version": 3,
  "sources": ["../../src/handlers/createManager.ts", "../../src/db/connection.ts", "../../src/db/models/Manager.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from \"aws-lambda\";\r\nimport { connectToDb } from \"../db/connection\";\r\nimport { getManagerModel } from \"../db/models/Manager\";\r\n\r\nconst corsHeaders = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Headers\": \"*\",\r\n  \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\r\n  \"Content-Type\": \"application/json\"\r\n};\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n  // Handle preflight request\r\n  if (event.httpMethod === \"OPTIONS\") {\r\n    return {\r\n      statusCode: 200,\r\n      headers: corsHeaders,\r\n      body: \"\"\r\n    };\r\n  }\r\n\r\n  try {\r\n    const body = JSON.parse(event.body || \"{}\");\r\n    const { cognitoId, name, email, phoneNumber } = body;\r\n\r\n    if (!cognitoId || !name || !email || !phoneNumber) {\r\n      return {\r\n        statusCode: 400,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ message: \"Missing required fields.\" })\r\n      };\r\n    }\r\n\r\n    const sequelize = await connectToDb();\r\n    const Manager = await getManagerModel(sequelize);\r\n\r\n    const existing = await Manager.findOne({ where: { cognitoId } });\r\n    if (existing) {\r\n      return {\r\n        statusCode: 200,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify(existing.toJSON())\r\n      };\r\n    }\r\n\r\n    const created = await Manager.create({ cognitoId, name, email, phoneNumber });\r\n\r\n    return {\r\n      statusCode: 201,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify(created.toJSON())\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      statusCode: 500,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify({\r\n        message: \"Error creating manager\",\r\n        error: error.message\r\n      })\r\n    };\r\n  }\r\n};\r\n", "import { Sequelize } from \"sequelize\";\r\n\r\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\r\nconst timeout = Number(TIMEOUT) * 1000;\r\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\r\n\r\nlet sequelize: Sequelize | null = null;\r\n\r\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\r\nexport const connectToDb = async (): Promise<Sequelize> => {\r\n  if (sequelize) {\r\n    sequelize.connectionManager.initPools();\r\n\r\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\r\n      delete sequelize.connectionManager.getConnection;\r\n    }\r\n    return sequelize;\r\n  }\r\n\r\n  sequelize = new Sequelize(URI, {\r\n    logging: false,\r\n    pool: {\r\n      min: 0,\r\n      max: 2,\r\n      idle: 0,\r\n      acquire: 3000,\r\n      evict: timeout,\r\n    },\r\n  });\r\n  await sequelize.authenticate();\r\n\r\n  return sequelize;\r\n};\r\n", "// src/db/models/Manager.ts\r\nimport { Sequelize, Model, DataTypes } from \"sequelize\";\r\nimport type { ModelAttributes } from \"sequelize\";\r\n\r\n// Define class extending Sequelize Model\r\nclass Manager extends Model {\r\n  public id!: number;\r\n  public cognitoId!: string;\r\n  public name!: string;\r\n  public email!: string;\r\n  public phoneNumber!: string;\r\n}\r\n\r\n// Schema definition\r\nconst schema: ModelAttributes = {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    autoIncrement: true,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  },\r\n  cognitoId: {\r\n    type: DataTypes.STRING,\r\n    unique: true,\r\n    allowNull: false,\r\n  },\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  email: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  phoneNumber: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n};\r\n\r\n// Function to initialize the model with Sequelize instance\r\nexport const getManagerModel = async (sequelize?: Sequelize): Promise<typeof Manager> => {\r\n  if (sequelize) {\r\n    Manager.init(schema, {\r\n      sequelize,\r\n      modelName: \"managers\",\r\n      tableName: \"managers\",\r\n      timestamps: false,\r\n    });\r\n\r\n    await Manager.sync(); // Sync table if it doesn't exist\r\n  }\r\n\r\n  return Manager;\r\n};\r\n\r\n// Export the model type\r\nexport type { Manager };\r\n"],
  "mappings": "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",
  "names": ["import_sequelize", "sequelize", "sequelize", "Manager"]
}
