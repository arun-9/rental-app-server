{
  "version": 3,
  "sources": ["../../src/handlers/getManagerById.ts", "../../src/db/connection.ts", "../../src/db/models/managers.ts"],
  "sourcesContent": ["import { connectToDb } from \"../db/connection\";\r\nimport { getManagerModel } from \"../db/models/managers\";\r\nimport type { IManagers } from \"../db/models/managers\";\r\nimport type { APIGatewayProxyEvent, APIGatewayProxyResult } from \"aws-lambda\";\r\nimport type { Sequelize } from \"sequelize\";\r\n\r\nlet sequelize: Sequelize | null = null;\r\nlet Managers: IManagers | null = null;\r\n\r\nexport const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n  if (!sequelize) {\r\n    sequelize = await connectToDb();\r\n    Managers = await getManagerModel(sequelize);\r\n  }\r\n\r\n  const { id } = event.pathParameters ?? {};\r\n\r\n  if (!id || isNaN(Number(id))) {\r\n    return {\r\n      statusCode: 400,\r\n      body: JSON.stringify({ message: \"Missing or invalid path parameter: id (must be a number)\" }),\r\n    };\r\n  }\r\n\r\n  try {\r\n    const manager = await Managers.findByPk(Number(id));\r\n\r\n    if (!manager) {\r\n      return {\r\n        statusCode: 404,\r\n        body: JSON.stringify({ message: \"Manager not found with the given id.\" }),\r\n      };\r\n    }\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(manager.toJSON()),\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        message: \"Failed to fetch manager by id\",\r\n        error: error.message,\r\n      }),\r\n    };\r\n  }\r\n};\r\n", "import { Sequelize } from \"sequelize\";\r\n\r\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\r\nconst timeout = Number(TIMEOUT) * 1000;\r\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\r\n\r\nlet sequelize: Sequelize | null = null;\r\n\r\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\r\nexport const connectToDb = async (): Promise<Sequelize> => {\r\n  if (sequelize) {\r\n    sequelize.connectionManager.initPools();\r\n\r\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\r\n      delete sequelize.connectionManager.getConnection;\r\n    }\r\n    return sequelize;\r\n  }\r\n\r\n  sequelize = new Sequelize(URI, {\r\n    logging: false,\r\n    pool: {\r\n      min: 0,\r\n      max: 2,\r\n      idle: 0,\r\n      acquire: 3000,\r\n      evict: timeout,\r\n    },\r\n  });\r\n  await sequelize.authenticate();\r\n\r\n  return sequelize;\r\n};\r\n", "import { Sequelize, Model, DataTypes } from \"sequelize\";\r\nimport type { ModelAttributes } from \"sequelize\";\r\n\r\nclass Managers extends Model {}\r\n\r\nconst schema: ModelAttributes = {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    autoIncrement: true,\r\n    primaryKey: true, // \u2705 PK as per image\r\n    allowNull: false,\r\n  },\r\n  cognitoId: {\r\n    type: DataTypes.STRING,\r\n    unique: true,      // \u2705 Unique constraint\r\n    allowNull: false,\r\n  },\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  email: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  phoneNumber: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n};\r\n\r\ntype IManagers = typeof Managers;\r\n\r\nexport const getManagerModel = async (sequelize?: Sequelize): Promise<IManagers> => {\r\n  if (sequelize) {\r\n    Managers.init(schema, {\r\n      sequelize,\r\n      modelName: \"managers\",\r\n      tableName: \"managers\",\r\n      timestamps: false,\r\n    });\r\n    await Managers.sync();\r\n  }\r\n\r\n  return Managers;\r\n};\r\n\r\nexport type { IManagers };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAA0B;AAE1B,IAAM,EAAE,SAAS,SAAS,SAAS,SAAS,YAAY,IAAI,QAAQ;AACpE,IAAM,UAAU,OAAO,OAAO,IAAI;AAClC,IAAM,MAAM,cAAc,OAAO,IAAI,WAAW,IAAI,OAAO,IAAI,OAAO;AAEtE,IAAI,YAA8B;AAG3B,IAAM,cAAc,YAAgC;AACzD,MAAI,WAAW;AACb,cAAU,kBAAkB,UAAU;AAEtC,QAAI,UAAU,kBAAkB,eAAe,eAAe,GAAG;AAC/D,aAAO,UAAU,kBAAkB;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAEA,cAAY,IAAI,2BAAU,KAAK;AAAA,IAC7B,SAAS;AAAA,IACT,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,EACF,CAAC;AACD,QAAM,UAAU,aAAa;AAE7B,SAAO;AACT;;;AChCA,IAAAA,oBAA4C;AAG5C,IAAM,WAAN,cAAuB,wBAAM;AAAC;AAE9B,IAAM,SAA0B;AAAA,EAC9B,IAAI;AAAA,IACF,MAAM,4BAAU;AAAA,IAChB,eAAe;AAAA,IACf,YAAY;AAAA;AAAA,IACZ,WAAW;AAAA,EACb;AAAA,EACA,WAAW;AAAA,IACT,MAAM,4BAAU;AAAA,IAChB,QAAQ;AAAA;AAAA,IACR,WAAW;AAAA,EACb;AAAA,EACA,MAAM;AAAA,IACJ,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AAAA,IACL,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,aAAa;AAAA,IACX,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AACF;AAIO,IAAM,kBAAkB,OAAOC,eAA8C;AAClF,MAAIA,YAAW;AACb,aAAS,KAAK,QAAQ;AAAA,MACpB,WAAAA;AAAA,MACA,WAAW;AAAA,MACX,WAAW;AAAA,MACX,YAAY;AAAA,IACd,CAAC;AACD,UAAM,SAAS,KAAK;AAAA,EACtB;AAEA,SAAO;AACT;;;AFvCA,IAAIC,aAA8B;AAClC,IAAIC,YAA6B;AAE1B,IAAM,UAAU,OAAO,UAAgE;AAC5F,MAAI,CAACD,YAAW;AACd,IAAAA,aAAY,MAAM,YAAY;AAC9B,IAAAC,YAAW,MAAM,gBAAgBD,UAAS;AAAA,EAC5C;AAEA,QAAM,EAAE,GAAG,IAAI,MAAM,kBAAkB,CAAC;AAExC,MAAI,CAAC,MAAM,MAAM,OAAO,EAAE,CAAC,GAAG;AAC5B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,2DAA2D,CAAC;AAAA,IAC9F;AAAA,EACF;AAEA,MAAI;AACF,UAAM,UAAU,MAAMC,UAAS,SAAS,OAAO,EAAE,CAAC;AAElD,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,SAAS,uCAAuC,CAAC;AAAA,MAC1E;AAAA,IACF;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,KAAK,UAAU,QAAQ,OAAO,CAAC;AAAA,IACvC;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": ["import_sequelize", "sequelize", "sequelize", "Managers"]
}
