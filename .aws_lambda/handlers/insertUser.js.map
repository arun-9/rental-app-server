{
  "version": 3,
  "sources": ["../../src/handlers/insertUser.ts", "../../src/db/connection.ts", "../../src/db/models/user.ts"],
  "sourcesContent": ["import { connectToDb } from \"../db/connection\";\nimport { getUserModel } from \"../db/models/user\";\nimport type { IUser } from \"../db/models/user\";\nimport type { Sequelize } from \"sequelize\";\nimport type { APIGatewayProxyEvent, APIGatewayProxyResult } from \"aws-lambda\";\n\nlet sequelize: Sequelize | null = null;\nlet User: IUser | null = null;\n\nexport default async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n  if (!sequelize) {\n    sequelize = await connectToDb();\n    User = await getUserModel(sequelize);\n  }\n  const createdUser = await User.create(JSON.parse(event.body), { returning: true });\n\n  return {\n    statusCode: 201,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(createdUser.toJSON()),\n  };\n};\n", "import { Sequelize } from \"sequelize\";\n\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\nconst timeout = Number(TIMEOUT) * 1000;\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\n\nlet sequelize: Sequelize | null = null;\n\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\nexport const connectToDb = async (): Promise<Sequelize> => {\n  if (sequelize) {\n    sequelize.connectionManager.initPools();\n\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\n      delete sequelize.connectionManager.getConnection;\n    }\n    return sequelize;\n  }\n\n  sequelize = new Sequelize(URI, {\n    logging: false,\n    pool: {\n      min: 0,\n      max: 2,\n      idle: 0,\n      acquire: 3000,\n      evict: timeout,\n    },\n  });\n  await sequelize.authenticate();\n\n  return sequelize;\n};\n", "import { Sequelize, Model, DataTypes } from \"sequelize\";\nimport type { ModelAttributes } from \"sequelize\";\nclass User extends Model {}\n\nconst schema: ModelAttributes = {\n  id: {\n    primaryKey: true,\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n  },\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n  age: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n  },\n};\ntype IUser = typeof User;\nexport const getUserModel = async (sequelize?: Sequelize): Promise<IUser> => {\n  if (sequelize) {\n    User.init(schema, { sequelize, modelName: \"user\", timestamps: false });\n    await User.sync();\n  }\n\n  return User;\n};\n\nexport type { IUser };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAA0B;AAE1B,IAAM,EAAE,SAAS,SAAS,SAAS,SAAS,YAAY,IAAI,QAAQ;AACpE,IAAM,UAAU,OAAO,OAAO,IAAI;AAClC,IAAM,MAAM,cAAc,OAAO,IAAI,WAAW,IAAI,OAAO,IAAI,OAAO;AAEtE,IAAI,YAA8B;AAG3B,IAAM,cAAc,YAAgC;AACzD,MAAI,WAAW;AACb,cAAU,kBAAkB,UAAU;AAEtC,QAAI,UAAU,kBAAkB,eAAe,eAAe,GAAG;AAC/D,aAAO,UAAU,kBAAkB;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAEA,cAAY,IAAI,2BAAU,KAAK;AAAA,IAC7B,SAAS;AAAA,IACT,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,EACF,CAAC;AACD,QAAM,UAAU,aAAa;AAE7B,SAAO;AACT;;;AChCA,IAAAA,oBAA4C;AAE5C,IAAM,OAAN,cAAmB,wBAAM;AAAC;AAE1B,IAAM,SAA0B;AAAA,EAC9B,IAAI;AAAA,IACF,YAAY;AAAA,IACZ,MAAM,4BAAU;AAAA,IAChB,eAAe;AAAA,EACjB;AAAA,EACA,MAAM;AAAA,IACJ,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,KAAK;AAAA,IACH,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AACF;AAEO,IAAM,eAAe,OAAOC,eAA0C;AAC3E,MAAIA,YAAW;AACb,SAAK,KAAK,QAAQ,EAAE,WAAAA,YAAW,WAAW,QAAQ,YAAY,MAAM,CAAC;AACrE,UAAM,KAAK,KAAK;AAAA,EAClB;AAEA,SAAO;AACT;;;AFrBA,IAAIC,aAA8B;AAClC,IAAIC,QAAqB;AAEzB,IAAO,qBAAQ,OAAO,UAAgE;AACpF,MAAI,CAACD,YAAW;AACd,IAAAA,aAAY,MAAM,YAAY;AAC9B,IAAAC,QAAO,MAAM,aAAaD,UAAS;AAAA,EACrC;AACA,QAAM,cAAc,MAAMC,MAAK,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG,EAAE,WAAW,KAAK,CAAC;AAEjF,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,MACP,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU,YAAY,OAAO,CAAC;AAAA,EAC3C;AACF;",
  "names": ["import_sequelize", "sequelize", "sequelize", "User"]
}
