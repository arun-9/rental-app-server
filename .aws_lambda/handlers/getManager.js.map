{
  "version": 3,
  "sources": ["../../src/handlers/getManager.ts", "../../src/db/connection.ts", "../../src/db/models/manager.ts"],
  "sourcesContent": ["import { connectToDb } from \"../db/connection\";\r\nimport { getManagerModel } from \"../db/models/manager\";\r\nimport type { IManager } from \"../db/models/manager\";\r\nimport type { Sequelize } from \"sequelize\";\r\nimport type {\r\n  APIGatewayProxyEventV2,\r\n  APIGatewayProxyResultV2,\r\n} from \"aws-lambda\";\r\n\r\nlet sequelize: Sequelize | null = null;\r\nlet Manager: IManager | null = null;\r\n\r\nconst corsHeaders = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"Access-Control-Allow-Origin\": \"*\", // or use your frontend domain\r\n};\r\n\r\nexport default async (\r\n  event: APIGatewayProxyEventV2\r\n): Promise<APIGatewayProxyResultV2> => {\r\n  try {\r\n    if (!sequelize) {\r\n      sequelize = await connectToDb();\r\n      Manager = await getManagerModel(sequelize);\r\n    }\r\n\r\n    const cognitoId = event.pathParameters?.cognitoId;\r\n    // \u2705 Add this log immediately after fetching path parameter\r\n    console.log(\"Cognito ID received:\", cognitoId);\r\n    if (!cognitoId) {\r\n      return {\r\n        statusCode: 400,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ error: \"Missing cognitoId in path\" }),\r\n      };\r\n    }\r\n\r\n    const manager = await Manager.findOne({ where: { cognitoId } });\r\n\r\n    if (!manager) {\r\n      return {\r\n        statusCode: 404,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ error: \"Manager not found\" }),\r\n      };\r\n    }\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify(manager.toJSON()),\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to get manager:\", error);\r\n    return {\r\n      statusCode: 500,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify({ error: \"Failed to get manager\" }),\r\n    };\r\n  }\r\n};\r\n", "import { Sequelize } from \"sequelize\";\r\n\r\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\r\nconst timeout = Number(TIMEOUT) * 1000;\r\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\r\n\r\nlet sequelize: Sequelize | null = null;\r\n\r\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\r\nexport const connectToDb = async (): Promise<Sequelize> => {\r\n  if (sequelize) {\r\n    sequelize.connectionManager.initPools();\r\n\r\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\r\n      delete sequelize.connectionManager.getConnection;\r\n    }\r\n    return sequelize;\r\n  }\r\n\r\n  sequelize = new Sequelize(URI, {\r\n    logging: false,\r\n    pool: {\r\n      min: 0,\r\n      max: 2,\r\n      idle: 0,\r\n      acquire: 3000,\r\n      evict: timeout,\r\n    },\r\n  });\r\n  await sequelize.authenticate();\r\n\r\n  return sequelize;\r\n};\r\n", "import { Sequelize, Model, DataTypes } from \"sequelize\";\r\nimport type { ModelAttributes } from \"sequelize\";\r\n\r\n// 1. Create the class\r\nclass Manager extends Model {}\r\n\r\n// 2. Define the schema\r\nconst schema: ModelAttributes = {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n  },\r\n  cognitoId: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n    unique: true,\r\n  },\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  email: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  phoneNumber: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n};\r\n\r\n// 3. Type alias for the class\r\ntype IManager = typeof Manager;\r\n\r\n// 4. Initialization function\r\nexport const getManagerModel = async (sequelize?: Sequelize): Promise<IManager> => {\r\n  if (sequelize) {\r\n    Manager.init(schema, {\r\n      sequelize,\r\n      modelName: \"manager\",\r\n      timestamps: false, // Disable createdAt and updatedAt\r\n    });\r\n\r\n    await Manager.sync(); // Ensure the table is created\r\n  }\r\n\r\n  return Manager;\r\n};\r\n\r\n// 5. Export types\r\nexport type { IManager };\r\n"],
  "mappings": "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",
  "names": ["import_sequelize", "sequelize", "sequelize", "Manager"]
}
