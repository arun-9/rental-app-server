{
  "version": 3,
  "sources": ["../../src/handlers/createProperty.ts", "../../src/db/connection.ts", "../../src/db/models/Property.ts"],
  "sourcesContent": ["// src/handlers/createProperty.ts\r\nimport { connectToDb } from \"../db/connection\";\r\nimport { getPropertyModel } from \"../db/models/Property\";\r\nimport type { IProperty } from \"../db/models/Property\";\r\nimport type { Sequelize } from \"sequelize\";\r\nimport type {\r\n  APIGatewayProxyEventV2,\r\n  APIGatewayProxyResultV2,\r\n} from \"aws-lambda\";\r\n\r\nlet sequelize: Sequelize | null = null;\r\nlet Property: IProperty | null = null;\r\n\r\nconst corsHeaders = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n};\r\n\r\nexport default async (\r\n  event: APIGatewayProxyEventV2\r\n): Promise<APIGatewayProxyResultV2> => {\r\n  try {\r\n    if (!sequelize) {\r\n      sequelize = await connectToDb();\r\n      Property = await getPropertyModel(sequelize);\r\n    }\r\n\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n\r\n    const createdProperty = await Property.create(body, { returning: true });\r\n\r\n    return {\r\n      statusCode: 201,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify(createdProperty.toJSON()),\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to create property:\", error);\r\n    return {\r\n      statusCode: 500,\r\n      headers: corsHeaders,\r\n      body: JSON.stringify({ error: \"Failed to create property\" }),\r\n    };\r\n  }\r\n};\r\n", "import { Sequelize } from \"sequelize\";\r\n\r\nconst { TIMEOUT, DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } = process.env;\r\nconst timeout = Number(TIMEOUT) * 1000;\r\nconst URI = `postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}`;\r\n\r\nlet sequelize: Sequelize | null = null;\r\n\r\n// https://sequelize.org/docs/v6/other-topics/aws-lambda/#tldr\r\nexport const connectToDb = async (): Promise<Sequelize> => {\r\n  if (sequelize) {\r\n    sequelize.connectionManager.initPools();\r\n\r\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\r\n      delete sequelize.connectionManager.getConnection;\r\n    }\r\n    return sequelize;\r\n  }\r\n\r\n  sequelize = new Sequelize(URI, {\r\n    logging: false,\r\n    pool: {\r\n      min: 0,\r\n      max: 2,\r\n      idle: 0,\r\n      acquire: 3000,\r\n      evict: timeout,\r\n    },\r\n  });\r\n  await sequelize.authenticate();\r\n\r\n  return sequelize;\r\n};\r\n", "// src/db/models/Property.ts\r\nimport { Sequelize, Model, DataTypes } from \"sequelize\";\r\nimport type { ModelAttributes } from \"sequelize\";\r\n\r\nclass Property extends Model {}\r\n\r\nconst schema: ModelAttributes = {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n  },\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  address: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n  },\r\n  numberOfUnits: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  },\r\n  numberOfTenants: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  },\r\n  thumbnail: {\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n  },\r\n  managerId: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  },\r\n};\r\n\r\ntype IProperty = typeof Property;\r\n\r\nexport const getPropertyModel = async (\r\n  sequelize?: Sequelize\r\n): Promise<IProperty> => {\r\n  if (sequelize) {\r\n    Property.init(schema, {\r\n      sequelize,\r\n      modelName: \"property\",\r\n      timestamps: false,\r\n    });\r\n\r\n    await Property.sync();\r\n  }\r\n\r\n  return Property;\r\n};\r\n\r\nexport type { IProperty };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAA0B;AAE1B,IAAM,EAAE,SAAS,SAAS,SAAS,SAAS,YAAY,IAAI,QAAQ;AACpE,IAAM,UAAU,OAAO,OAAO,IAAI;AAClC,IAAM,MAAM,cAAc,OAAO,IAAI,WAAW,IAAI,OAAO,IAAI,OAAO;AAEtE,IAAI,YAA8B;AAG3B,IAAM,cAAc,YAAgC;AACzD,MAAI,WAAW;AACb,cAAU,kBAAkB,UAAU;AAEtC,QAAI,UAAU,kBAAkB,eAAe,eAAe,GAAG;AAC/D,aAAO,UAAU,kBAAkB;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAEA,cAAY,IAAI,2BAAU,KAAK;AAAA,IAC7B,SAAS;AAAA,IACT,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,EACF,CAAC;AACD,QAAM,UAAU,aAAa;AAE7B,SAAO;AACT;;;AC/BA,IAAAA,oBAA4C;AAG5C,IAAM,WAAN,cAAuB,wBAAM;AAAC;AAE9B,IAAM,SAA0B;AAAA,EAC9B,IAAI;AAAA,IACF,MAAM,4BAAU;AAAA,IAChB,YAAY;AAAA,IACZ,eAAe;AAAA,EACjB;AAAA,EACA,MAAM;AAAA,IACJ,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,SAAS;AAAA,IACP,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,eAAe;AAAA,IACb,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,WAAW;AAAA,IACT,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AAAA,EACA,WAAW;AAAA,IACT,MAAM,4BAAU;AAAA,IAChB,WAAW;AAAA,EACb;AACF;AAIO,IAAM,mBAAmB,OAC9BC,eACuB;AACvB,MAAIA,YAAW;AACb,aAAS,KAAK,QAAQ;AAAA,MACpB,WAAAA;AAAA,MACA,WAAW;AAAA,MACX,YAAY;AAAA,IACd,CAAC;AAED,UAAM,SAAS,KAAK;AAAA,EACtB;AAEA,SAAO;AACT;;;AF5CA,IAAIC,aAA8B;AAClC,IAAIC,YAA6B;AAEjC,IAAM,cAAc;AAAA,EAClB,gBAAgB;AAAA,EAChB,+BAA+B;AACjC;AAEA,IAAO,yBAAQ,OACb,UACqC;AACrC,MAAI;AACF,QAAI,CAACD,YAAW;AACd,MAAAA,aAAY,MAAM,YAAY;AAC9B,MAAAC,YAAW,MAAM,iBAAiBD,UAAS;AAAA,IAC7C;AAEA,UAAM,OAAO,MAAM,OAAO,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC;AAEpD,UAAM,kBAAkB,MAAMC,UAAS,OAAO,MAAM,EAAE,WAAW,KAAK,CAAC;AAEvE,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU,gBAAgB,OAAO,CAAC;AAAA,IAC/C;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU,EAAE,OAAO,4BAA4B,CAAC;AAAA,IAC7D;AAAA,EACF;AACF;",
  "names": ["import_sequelize", "sequelize", "sequelize", "Property"]
}
